{"version":3,"sources":["components/Header/styles.js","assets/sad.png","assets/happy.png","constants.tsx","components/Header/index.tsx","utils/index.ts","components/GameConfigModal/styles.js","components/GameConfigModal/index.tsx","assets/mine_default.png","assets/mine_unarmed.png","assets/mine_red.png","components/PlayArea/MineIcon.tsx","assets/flag.png","components/PlayArea/FlagIcon.tsx","components/PlayArea/styles.js","components/PlayArea/index.tsx","components/App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["FlagsCounter","styled","span","ResetIcon","img","iconWidth","iconHeight","Header","flagsCount","isWon","isGameOver","reset","data-test","src","sad_icon","happy_icon","alt","onClick","width","height","uuid","replace","c","r","Math","random","toString","FormWrapper","div","ROWS_COLUMNS_COUNTS","MINES_COUNTS","formFieldValidation","required","message","GameConfigModal","isConfigDefault","onSubmit","useState","showModalOnStart","setShowModalOnStart","rowsCount","setRowsCount","columnsCount","setColumnsCount","minesCount","setMinesCount","renderOptions","optionsArr","map","value","Option","useEffect","visible","onOk","onCancel","okButtonProps","disabled","okText","maskClosable","onValuesChange","values","Item","label","name","rules","MineTypes","MineIconsMappings","default_mine_icon","unarmed_mine_icon","red_mine_icon","MineIcon","type","icon","className","FlagIcon","dataCoord","flag","data-coord","CellTypes","AreaWrapper","Row","CellWrapper","props","showEmpty","getRandomArbitrary","min","max","round","PlayArea","config","setGameOver","_setFlagsCount","setShowCongratz","allCoordinates","_setAllCoordinates","prevAllCoordinates","useRef","currAllCoordinates","currFlagsCount","prevIsGameOver","setAllCoordinates","coordinates","current","startRound","flaggedCellsNumber","key","flagged","count","calcFlaggedCells","Object","keys","length","cell","show","Mine","checkIfWon","assign","revealAllMines","document","addEventListener","handleCellFlag","event","preventDefault","cellKey","target","getAttribute","parseCoordToKey","coordinate","x","y","minesCoordinates","getRandomCoord","i","newCoord","generateMinesCoordinates","Empty","coordinateAsKey","setupMines","coordKey","centralCoord","neighbourMinesCount","neighbourCoord","Number","calcNeighbourMines","handleCellClick","coordAsKey","checkEmptyNeighbours","cellCoordsSum","abs","cellToCheck","neightbourCoordsSum","coordsSumsDifference","renderCell","flaggedCellRender","renderCellBasedOnType","rows","Array","fill","columns","_","classIfBlown","cellClickHandler","defaultConfig","App","gameConfig","setGameConfig","prevGameConfig","setFlagsCount","showCongratz","isEqual","success","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.21ced1b2.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const FlagsCounter = styled.span`\n  float: left;\n`;\n\nexport const ResetIcon = styled.img`\n  position: absolute;\n  left: 50%;\n  top: 25%;\n`;\n","export default __webpack_public_path__ + \"static/media/sad.a13beb9c.png\";","export default __webpack_public_path__ + \"static/media/happy.fb4df1d1.png\";","export const iconWidth = \"50px\";\nexport const iconHeight = \"40px\";\n","import React from \"react\";\nimport { Card } from \"antd\";\nimport { FlagsCounter, ResetIcon } from \"./styles\";\nimport sad_icon from \"../../assets/sad.png\";\nimport happy_icon from \"../../assets/happy.png\";\nimport { iconWidth, iconHeight } from \"../../constants\";\n\nexport interface IProps {\n  flagsCount: number;\n  isGameOver: boolean;\n  isWon: boolean;\n  reset: () => void;\n}\n\nconst Header: React.FC<IProps> = ({ flagsCount, isWon, isGameOver, reset }) => {\n  return (\n    <Card data-test=\"header-component\">\n      <FlagsCounter>Flags remaining: {flagsCount}</FlagsCounter>\n      <ResetIcon\n        src={isGameOver && !isWon ? sad_icon : happy_icon}\n        alt=\"smile\"\n        onClick={reset}\n        width={iconWidth}\n        height={iconHeight}\n        data-test=\"smile-reset-icon\"\n      />\n    </Card>\n  );\n};\n\nexport default Header;\n","export function uuid() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n","import styled from \"styled-components\";\n\nexport const FormWrapper = styled.div`\n  margin: 3rem 0;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { Modal, Form, Select } from \"antd\";\nimport { IGameConfig } from \"../../interfaces\";\nimport { uuid } from \"../../utils\";\nimport { FormWrapper } from \"./styles\";\n\nconst ROWS_COLUMNS_COUNTS = [10, 20, 30, 40];\nconst MINES_COUNTS = [30, 60, 90];\n\ninterface IProps {\n  isConfigDefault: boolean;\n  onSubmit: (values: IGameConfig) => void;\n}\n\nconst formFieldValidation = [{ required: true, message: \"Required\" }];\n\nconst GameConfigModal: React.FC<IProps> = ({ isConfigDefault, onSubmit }) => {\n  const [showModalOnStart, setShowModalOnStart] = useState(false);\n\n  const [rowsCount, setRowsCount] = useState(0);\n  const [columnsCount, setColumnsCount] = useState(0);\n  const [minesCount, setMinesCount] = useState(0);\n\n  useEffect(() => {\n    isConfigDefault && setShowModalOnStart(true);\n  }, [isConfigDefault]);\n\n  function renderOptions(optionsArr: Array<number>) {\n    return (\n      <>\n        {optionsArr.map((value: number) => (\n          <Select.Option key={uuid()} value={value}>\n            {value}\n          </Select.Option>\n        ))}\n      </>\n    );\n  }\n\n  function onFormValuesChange(values: IGameConfig) {\n    const { rowsCount, columnsCount, minesCount } = values;\n\n    rowsCount && setRowsCount(rowsCount);\n    columnsCount && setColumnsCount(columnsCount);\n    minesCount && setMinesCount(minesCount);\n  }\n\n  function onSubmitSettings() {\n    onSubmit({ rowsCount, columnsCount, minesCount });\n    setShowModalOnStart(false);\n  }\n\n  return (\n    <Modal\n      visible={showModalOnStart}\n      onOk={onSubmitSettings}\n      onCancel={() => setShowModalOnStart(false)}\n      okButtonProps={{ disabled: !rowsCount || !columnsCount || !minesCount }}\n      okText=\"Start\"\n      maskClosable={false}\n      data-test=\"configs-modal-component\"\n    >\n      <FormWrapper>\n        <Form onValuesChange={onFormValuesChange}>\n          <Form.Item\n            label=\"Please specify number of rows\"\n            name=\"rowsCount\"\n            rules={formFieldValidation}\n          >\n            <Select>{renderOptions(ROWS_COLUMNS_COUNTS)}</Select>\n          </Form.Item>\n          <Form.Item\n            label=\"Please specify number of columns\"\n            name=\"columnsCount\"\n            rules={formFieldValidation}\n          >\n            <Select>{renderOptions(ROWS_COLUMNS_COUNTS)}</Select>\n          </Form.Item>\n          <Form.Item\n            label=\"Please specify number of mines\"\n            name=\"minesCount\"\n            rules={formFieldValidation}\n          >\n            <Select>{renderOptions(MINES_COUNTS)}</Select>\n          </Form.Item>\n        </Form>\n      </FormWrapper>\n    </Modal>\n  );\n};\n\nexport default GameConfigModal;\n","export default __webpack_public_path__ + \"static/media/mine_default.8e952ffc.png\";","export default __webpack_public_path__ + \"static/media/mine_unarmed.c703c937.png\";","export default __webpack_public_path__ + \"static/media/mine_red.5baffb83.png\";","import React from \"react\";\nimport default_mine_icon from \"../../assets/mine_default.png\";\nimport unarmed_mine_icon from \"../../assets/mine_unarmed.png\";\nimport red_mine_icon from \"../../assets/mine_red.png\";\n\nexport const MineTypes = {\n  default: \"0\",\n  unarmed: \"1\",\n  blown: \"2\",\n};\n\nconst MineIconsMappings = {\n  [MineTypes.default]: default_mine_icon,\n  [MineTypes.unarmed]: unarmed_mine_icon,\n  [MineTypes.blown]: red_mine_icon,\n};\n\ninterface IProps {\n  type: string;\n}\n\nconst MineIcon: React.FC<IProps> = ({ type = MineTypes.default }) => {\n  const icon = MineIconsMappings[type];\n  return (\n    <img\n      className=\"mine-cell\"\n      src={icon}\n      alt=\"oops\"\n      width=\"40px\"\n      height=\"40px\"\n    />\n  );\n};\n\nexport default MineIcon;\n","export default __webpack_public_path__ + \"static/media/flag.63f801a5.png\";","import React from \"react\";\nimport flag from \"../../assets/flag.png\";\nimport { iconWidth, iconHeight } from \"../../constants\";\n\ninterface IProps {\n  dataCoord: string;\n}\n\nconst FlagIcon: React.FC<IProps> = ({ dataCoord }) => (\n  <img\n    src={flag}\n    alt=\"flag\"\n    data-coord={dataCoord}\n    width={iconWidth}\n    height={iconHeight}\n  />\n);\n\nexport default FlagIcon;\n","import styled from \"styled-components\";\n\nexport const AreaWrapper = styled.div`\n  display: inline-block;\n  margin-top: 1rem;\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const CellWrapper = styled.div`\n  border: 1px solid;\n  width: 3rem;\n  height: 3rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: ${(props) => (props.showEmpty ? \"lightgrey\" : \"#fff\")};\n`;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { IGameConfig } from \"../../interfaces\";\nimport MineIcon from \"./MineIcon\";\nimport FlagIcon from \"./FlagIcon\";\nimport { AreaWrapper, Row, CellWrapper } from \"./styles\";\nimport { MineTypes } from \"./MineIcon\";\nimport { uuid } from \"../../utils\";\n\nexport interface IProps {\n  config: IGameConfig;\n  isGameOver: boolean;\n  setGameOver: (isGameOver: boolean) => void;\n  _setFlagsCount: (count: number) => void;\n  setShowCongratz: (isWon: boolean) => void;\n  flagsCount: number;\n}\n\ntype Coordinate = {\n  x: number;\n  y: number;\n  type?: string;\n  neighbourMinesCount?: number;\n  show?: boolean;\n  flagged?: boolean;\n};\n\ntype CoordinatesDict = { [key: string]: any };\n\nenum CellTypes {\n  Empty = \"empty\",\n  Mine = \"mine\",\n  Number = \"number\",\n}\n\nfunction getRandomArbitrary(min: number, max: number) {\n  return Math.round(Math.random() * (max - min) + min);\n}\n\nconst PlayArea: React.FC<IProps> = ({\n  config,\n  isGameOver,\n  setGameOver,\n  flagsCount,\n  _setFlagsCount,\n  setShowCongratz,\n}) => {\n  const { rowsCount, columnsCount, minesCount } = config;\n  const [allCoordinates, _setAllCoordinates] = useState<CoordinatesDict>({});\n  const prevAllCoordinates = useRef<CoordinatesDict>();\n  const currAllCoordinates = useRef<CoordinatesDict>(allCoordinates); // for event listener not capturing actual state\n  const currFlagsCount = useRef(flagsCount); // for event listener not capturing actual state\n  const prevIsGameOver = useRef<boolean>();\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    rowsCount && columnsCount && minesCount && startRound();\n  }, [rowsCount, columnsCount, minesCount]);\n\n  useEffect(() => {\n    calcFlaggedCells();\n  }, [allCoordinates]);\n\n  useEffect(() => {\n    if (flagsCount === 0 && Object.keys(allCoordinates).length) checkIfWon();\n  }, [flagsCount]);\n\n  useEffect(() => {\n    if (isGameOver) revealAllMines();\n\n    if (!isGameOver && prevIsGameOver.current) startRound();\n  }, [isGameOver]);\n\n  useEffect(() => {\n    prevAllCoordinates.current = allCoordinates;\n    prevIsGameOver.current = isGameOver;\n  });\n\n  useEffect(() => {\n    document.addEventListener(\"contextmenu\", handleCellFlag);\n  }, []);\n\n  function setAllCoordinates(coordinates: CoordinatesDict) {\n    currAllCoordinates.current = coordinates;\n    _setAllCoordinates(coordinates);\n  }\n\n  function setFlagsCount(count: number) {\n    currFlagsCount.current = count;\n    _setFlagsCount(count);\n  }\n\n  function checkIfWon() {\n    let isWon = true;\n\n    for (const key in allCoordinates) {\n      const cell = allCoordinates[key];\n\n      if (!cell.show || (cell.type === CellTypes.Mine && !cell.flagged)) {\n        isWon = false;\n        break;\n      }\n    }\n    if (isWon) setShowCongratz(true);\n  }\n\n  function revealAllMines() {\n    const coordinates = Object.assign({}, allCoordinates);\n\n    for (let key in coordinates) {\n      if (coordinates[key].type === CellTypes.Mine)\n        coordinates[key].show = true;\n    }\n\n    setAllCoordinates(coordinates);\n  }\n\n  function calcFlaggedCells() {\n    let flaggedCellsNumber = 0;\n\n    for (const key in allCoordinates) {\n      if (allCoordinates[key].flagged) flaggedCellsNumber++;\n    }\n\n    setFlagsCount(config.minesCount - flaggedCellsNumber);\n  }\n\n  const handleCellFlag = (event: MouseEvent) => {\n    event.preventDefault();\n\n    const target = event.target as HTMLElement;\n    const cellKey = target!.getAttribute(\"data-coord\");\n    const coordinates = Object.assign({}, currAllCoordinates.current);\n\n    if (cellKey && coordinates[cellKey]) {\n      const cell = coordinates[cellKey];\n\n      if (cell.flagged) {\n        cell.flagged = !cell.flagged;\n        cell.show = !!!cell.show;\n      } else {\n        if (currFlagsCount.current > 0) {\n          cell.flagged = !!!cell.flagged;\n          cell.show = !!!cell.show;\n        }\n      }\n\n      setAllCoordinates(coordinates);\n    }\n  };\n\n  function parseCoordToKey(coordinate: Coordinate): string {\n    return `${coordinate.x}-${coordinate.y}`;\n  }\n\n  function startRound() {\n    const coordinates: CoordinatesDict = {};\n\n    setupMines(coordinates);\n    calcNeighbourMines(coordinates);\n\n    setAllCoordinates(coordinates);\n  }\n\n  function setupMines(coordinates: CoordinatesDict) {\n    const minesCoordinates: CoordinatesDict = generateMinesCoordinates();\n\n    for (let c = 0; c < columnsCount; c++) {\n      for (let r = 0; r < rowsCount; r++) {\n        const coordinate: Coordinate = {\n          x: c,\n          y: r,\n          type: CellTypes.Empty,\n          flagged: false,\n        };\n        const coordinateAsKey = parseCoordToKey(coordinate);\n        if (minesCoordinates[coordinateAsKey]) coordinate.type = CellTypes.Mine;\n\n        coordinates[coordinateAsKey] = coordinate;\n      }\n    }\n  }\n\n  function calcNeighbourMines(coordinates: CoordinatesDict) {\n    for (const coordKey in coordinates) {\n      const centralCoord: Coordinate = coordinates[coordKey];\n      if (centralCoord.type !== CellTypes.Mine) {\n        let neighbourMinesCount = 0;\n\n        for (let x = centralCoord.x - 1; x <= centralCoord.x + 1; x++) {\n          for (let y = centralCoord.y - 1; y <= centralCoord.y + 1; y++) {\n            const coordAsKey: string = parseCoordToKey({ x, y });\n            const neighbourCoord: Coordinate = coordinates[coordAsKey];\n\n            if (neighbourCoord && neighbourCoord.type === CellTypes.Mine)\n              neighbourMinesCount++;\n          }\n        }\n\n        if (neighbourMinesCount > 0) {\n          centralCoord.neighbourMinesCount = neighbourMinesCount;\n          centralCoord.type = CellTypes.Number;\n        }\n      }\n    }\n  }\n\n  function handleCellClick(cell: Coordinate) {\n    if (cell.type === CellTypes.Mine) {\n      setGameOver(true);\n    } else {\n      const coordinates = Object.assign({}, allCoordinates);\n      const coordAsKey: string = parseCoordToKey(cell);\n      coordinates[coordAsKey].show = true;\n\n      if (coordinates[coordAsKey].type === CellTypes.Empty)\n        checkEmptyNeighbours(coordinates[coordAsKey], coordinates);\n\n      setAllCoordinates(coordinates);\n    }\n  }\n\n  function checkEmptyNeighbours(\n    cell: Coordinate,\n    coordinates: CoordinatesDict\n  ) {\n    const cellCoordsSum = Math.abs(cell.x + cell.y);\n\n    for (let x = cell.x - 1; x <= cell.x + 1; x++) {\n      for (let y = cell.y - 1; y <= cell.y + 1; y++) {\n        if (x !== cell.x || y !== cell.y) {\n          const coordAsKey: string = parseCoordToKey({ x, y });\n          const cellToCheck = coordinates[coordAsKey];\n\n          if (cellToCheck) {\n            const neightbourCoordsSum = Math.abs(cellToCheck.x + cellToCheck.y);\n            const coordsSumsDifference = Math.abs(\n              cellCoordsSum - neightbourCoordsSum\n            );\n\n            if (cellToCheck && cellToCheck.type === CellTypes.Number) {\n              cellToCheck.show = true;\n            } else if (\n              cellToCheck &&\n              cellToCheck.type === CellTypes.Empty &&\n              !cellToCheck.show &&\n              coordsSumsDifference < 2 &&\n              neightbourCoordsSum !== cellCoordsSum\n            ) {\n              cellToCheck.show = true;\n              checkEmptyNeighbours(cellToCheck, coordinates);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function generateMinesCoordinates() {\n    const coordinates: CoordinatesDict = {};\n\n    const getRandomCoord = () => ({\n      x: getRandomArbitrary(0, columnsCount - 1),\n      y: getRandomArbitrary(0, rowsCount - 1),\n    });\n\n    for (let i = 0; i < minesCount; i++) {\n      let newCoord: Coordinate = getRandomCoord();\n      let key = parseCoordToKey(newCoord);\n\n      while (coordinates[key]) {\n        newCoord = getRandomCoord();\n        key = parseCoordToKey(newCoord);\n      }\n\n      coordinates[key] = newCoord;\n    }\n\n    return coordinates;\n  }\n\n  function flaggedCellRender(cell: Coordinate) {\n    if (isGameOver && cell.type === CellTypes.Mine)\n      return <MineIcon type={MineTypes.unarmed} />;\n\n    return <FlagIcon dataCoord={parseCoordToKey(cell)} />;\n  }\n\n  function renderCellBasedOnType(cell: Coordinate) {\n    switch (cell.type) {\n      case CellTypes.Number:\n        return cell.neighbourMinesCount;\n      case CellTypes.Empty:\n        return \"\";\n      case CellTypes.Mine:\n        return (\n          <MineIcon\n            data-test={`mine-cell-${cell.x}-${cell.y}`}\n            type={MineTypes.default}\n          />\n        );\n      default:\n        return null;\n    }\n  }\n\n  function renderCell(cell: Coordinate) {\n    if (!cell) return null;\n    if (!cell.show) return \"\";\n    if (cell.flagged) return flaggedCellRender(cell);\n\n    return renderCellBasedOnType(cell);\n  }\n\n  const rows = new Array(rowsCount).fill(0);\n  const columns = new Array(columnsCount).fill(0);\n\n  const cellClickHandler = (cell: Coordinate) =>\n    isGameOver ? null : handleCellClick(cell);\n\n  return (\n    <AreaWrapper data-test=\"play-area-component\">\n      {rows.map((_, r) => {\n        return (\n          <Row key={uuid()} data-test=\"play-area-row\">\n            {columns.map((_, c) => {\n              const cellKey = parseCoordToKey({ x: c, y: r });\n              const cell = allCoordinates[cellKey];\n              if (!cell) return null;\n\n              const coordAsKey = parseCoordToKey(cell);\n              const classIfBlown =\n                cell.type === CellTypes.Mine && !cell.flagged && cell.show\n                  ? \"blown\"\n                  : \"\";\n              return (\n                <CellWrapper\n                  key={coordAsKey}\n                  data-test=\"play-area-cell\"\n                  className={classIfBlown}\n                  onClick={() => cellClickHandler(cell)}\n                  data-coord={coordAsKey}\n                  showEmpty={\n                    cell.show && !cell.flagged && cell.type === CellTypes.Empty\n                  }\n                >\n                  {renderCell(cell)}\n                </CellWrapper>\n              );\n            })}\n          </Row>\n        );\n      })}\n    </AreaWrapper>\n  );\n};\n\nexport default PlayArea;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport isEqual from \"lodash.isequal\";\nimport { Card, message } from \"antd\";\nimport Header from \"../Header\";\nimport GameConfigModal from \"../GameConfigModal\";\nimport { IGameConfig } from \"../../interfaces\";\nimport \"./App.css\";\nimport PlayArea from \"../PlayArea\";\n\nconst defaultConfig = {\n  rowsCount: 0,\n  columnsCount: 0,\n  minesCount: 0,\n};\n\nfunction App() {\n  const [isGameOver, setGameOver] = useState(false);\n  const [gameConfig, setGameConfig] = useState<IGameConfig>(defaultConfig);\n  const prevGameConfig = useRef<IGameConfig>();\n  const [flagsCount, setFlagsCount] = useState(gameConfig.minesCount);\n  const [showCongratz, setShowCongratz] = useState(false);\n\n  useEffect(() => {\n    if (\n      prevGameConfig.current &&\n      !isEqual(gameConfig, prevGameConfig.current)\n    ) {\n      setFlagsCount(gameConfig.minesCount);\n    }\n  }, [gameConfig]);\n\n  useEffect(() => {\n    showCongratz && message.success(\"You won!!!\") && setGameOver(true);\n  }, [showCongratz]);\n\n  useEffect(() => {\n    prevGameConfig.current = gameConfig;\n  });\n\n  function resetGame() {\n    setGameOver(false);\n    setShowCongratz(false);\n  }\n\n  const isConfigDefault = isEqual(gameConfig, defaultConfig);\n\n  return (\n    <div className=\"App\">\n      <Card className=\"App-inner-container\">\n        <Header\n          flagsCount={flagsCount}\n          isGameOver={isGameOver}\n          isWon={showCongratz}\n          reset={resetGame}\n        />\n        <PlayArea\n          isGameOver={isGameOver}\n          setGameOver={setGameOver}\n          config={gameConfig}\n          flagsCount={flagsCount}\n          _setFlagsCount={setFlagsCount}\n          setShowCongratz={setShowCongratz}\n        />\n      </Card>\n      <GameConfigModal\n        isConfigDefault={isConfigDefault}\n        onSubmit={setGameConfig}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}